version: 1.3.{build}

environment:

  NIX_VERSION: 1.3.2
  NIX_BUILD_DIR: C:\nix_build
  DEPLOY_DIR: deploy
  BOOST_ROOT: C:\Libraries\boost_1_62_0

  NIX_APPVEYOR_ROOT: https://ci.appveyor.com/api/projects/stoewer/nix/artifacts/build


  matrix:
    # Miniconda 32 bit
    - MINICONDA: "C:\\Miniconda"
      bits: 32
      withnix: "--without-nix"
    - MINICONDA: "C:\\Miniconda"
      bits: 32
      withnix: "--with-nix"

    # Miniconda35 32 bit
    - MINICONDA: "C:\\Miniconda35"
      bits: 32
      withnix: "--without-nix"
    - MINICONDA: "C:\\Miniconda35"
      bits: 32
      withnix: "--with-nix"

    # Miniconda 64 bit
    - MINICONDA: "C:\\Miniconda-x64"
      bits: 64
      withnix: "--without-nix"
    - MINICONDA: "C:\\Miniconda-x64"
      bits: 64
      withnix: "--with-nix"

    # Miniconda35 64 bit
    - MINICONDA: "C:\\Miniconda35-x64"
      bits: 64
      withnix: "--without-nix"
    - MINICONDA: "C:\\Miniconda35-x64"
      bits: 64
      withnix: "--with-nix"

matrix:
    allow_failures:
        - withnix: "--with-nix"

init:
  - "ECHO %MINICONDA% %vcvars% (%bits%)"
  - ps: $env:PATH = "$env:MINICONDA;$env:MINICONDA\Scripts;$env:PATH;C:\Program Files\7-Zip;$env:NIX_BUILD_DIR\nix\bin"
  - python -c "import sys;print('Python version is {}'.format(sys.version))"

install:

    - ps: |
        if ($env:bits -eq "64") {
            $env:vcvars = "x86_amd64"
            $env:avjob = "job=Environment%3A%20PLATFORM%3Dx64%2C%20CONFIGURATION%3DRelease"
            $env:avfname = "nix-$env:NIX_VERSION-win64.exe"
        } else {
            $env:vcvars = "x86"
            $env:avjob = "job=Environment%3A%20PLATFORM%3Dx86%2C%20CONFIGURATION%3DRelease"
            $env:avfname = "nix-$env:NIX_VERSION-win32.exe"
        }

    - ps: |
        if ($env:withnix -eq "--with-nix") {
            mkdir "$env:NIX_BUILD_DIR"
            cd "$env:NIX_BUILD_DIR"
            mkdir nix
            cd nix

            $env:nix_exe_url = "$env:NIX_APPVEYOR_ROOT/$env:avfname`?$env:avjob"
            Write-Host "Downloading $env:nix_exe_url"

            Invoke-WebRequest -URI $env:nix_exe_url -OutFile "nix.exe"

            7z x nix.exe

            cd ..

            $env:BOOST_INC_DIR = "$env:BOOST_ROOT\include"
            $env:BOOST_LIB_DIR = "$env:BOOST_ROOT\lib"
        }

    - conda update --all --yes

    - conda install --yes numpy

    - conda install --yes h5py

    - ps: cd "$env:APPVEYOR_BUILD_FOLDER"

    - ps: $env:DISTUTILS_USE_SDK = "1"

    - ps: $env:MSSdk = "1"

build_script:
    - python setup.py build %withnix%

test_script:
    - python setup.py test

after_test:
    - ps: mkdir "$env:DEPLOY_DIR"

    - python setup.py bdist_wheel -d %DEPLOY_DIR% %withnix%

    - ps: |
        if ($env:bits -eq "64" -and $env:PYVER -eq "27") {
            python setup.py sdist -d $env:DEPLOY_DIR $env:withnix
        }

artifacts:
- path: $(DEPLOY_DIR)\*
  name: wheels

# Uncomment on_finish block to enable RDP
# on_finish:
#   - ps: $blockRdp = $true; iex ((new-object net.webclient).DownloadString('https://raw.githubusercontent.com/appveyor/ci/master/scripts/enable-rdp.ps1'))
